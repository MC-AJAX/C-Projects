//Nathan Jermann, CSC 144 A, assignment #11, 11-26-18
//Program which uses two arrays to count the rolls of two dice rolled 60,000,000 times.

#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <array>
#include <ctime>
#include <random>
using namespace std;

const size_t arraySize{12};//initialize variables for array sizes.
const size_t columns{6};
const size_t rows{6};

void rollDice(array<unsigned int, arraySize>array1, array<array<unsigned int, columns>, rows> array2);
void displayTableOne(array<unsigned int, arraySize> displayArray);
void displayTableTwo(array<array<unsigned int, columns>, rows> displayArray);//function prototypes

int main() {

    array<unsigned int, arraySize> frequency{};//initialize arrays
    array<array<unsigned int, columns>, rows> table{};

    rollDice(frequency, table);//call "rollDice" function
}

void rollDice(array<unsigned int, arraySize> array1, array<array<unsigned int, columns>, rows> array2) {
//function which simulates rolling two dice 60,000,000 times and fills array elements with results
    default_random_engine engine(static_cast<unsigned int>(time(0)));//random number generator
    uniform_int_distribution<unsigned int> randomInt(0, 5);

    for (unsigned int roll{0}; roll < 60000000; ++roll) {//simulate dice roll 60,000,000 times

        unsigned int die1{randomInt(engine) };//assign results of random number generation to variables
        unsigned int die2{randomInt(engine) };
        unsigned int sum{die1 + die2 + 1};//adds one to compensate for arrays starting at zero

        array1[sum] += 1;//add one to element generated by random number generation

        array2[die1][die2] +=1;//add one to element generated by random number generation
    }
    displayTableOne(array1);//call "displayTableOne" function
    displayTableTwo(array2);//call "displayTableTwo" function
}

void displayTableOne(array<unsigned int, arraySize> displayArray) {
//function which intakes a 1-D array and prints out a table to summarize results
    cout << "Sum" << setw(13) << "Frequency" << endl;

    for (unsigned int counter{0}; counter < displayArray.size(); ++counter) {//loop equal to size of array

        unsigned int displayCounter{counter + 1};//adds one to compensate for arrays starting at zero
        cout << setw(4) << displayCounter << setw(13) << displayArray[counter] << endl;
        //prints numbers 1-12 and he value of each matching element
    }
}

void displayTableTwo(array<array<unsigned int, columns>, rows> displayArray) {
//function which intakes a 2-D array and prints out a table to summarize results
    for (int counter{1}; counter <= 6; ++counter) {//loop 6 times
        cout << setw(9) << counter;//prints which face of "die1" will be shown
    }
    cout << endl;
    int displayCount{1};

    for  (auto const& row : displayArray) {//loops through each row of the array
        cout <<displayCount << "  ";//prints which face of "die1" will be shown
        for (auto const& element : row) {//loops through each column of the array
                cout << element << "  ";//prints each element of the column
        }
        ++displayCount;//increment the value of "displayCount"
        cout << endl;
    }
}

/*

initialize variables for array sizes

main()

    initialize array "frequency"
    initialize array "table"

    call "rollDice" function
        -pass it "frequency" and "table"

rollDice()

    create random number generator to generate numbers between 0-5

    loop 6,000,000 times

        initialize "die1" with a value from random generator engine
        initialize "die2" with a value from random generator engine
        initialize "sum" to the value of "die1" + "die2" + 1

        in array "frequency" add one to the element in the position equal to "sum"
        in array "table" add one to the element in the position equal to "die1" and "die2"

    call "displayTableOne"
        -pass it "frequency"

    call "displayTableTwo"
        -pass it "table"

displayTableOne()

    loop equal to the size of array

        initialize "displayCounter" and set it equal to "counter" + 1
        print "displayCounter" and the value of the element equal to "counter"

displayTableOne()

    loop 6 times
        print out which face of "die1" is shown

    next line
    initialize "displayCount" to 1

    loops through each row of the array
        use "displayCount" to print which face of "die1" will be shown

        loops through each column of the array
            prints each element of the column

        increment the value of "displayCount"
        next line
*/




